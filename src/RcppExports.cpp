// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// C_Choose
long double C_Choose(int x, int y);
RcppExport SEXP _distr6_C_Choose(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(C_Choose(x, y));
    return rcpp_result_gen;
END_RCPP
}
// C_ArcsinePdf
NumericMatrix C_ArcsinePdf(NumericVector x, NumericVector min, NumericVector max, bool logp);
RcppExport SEXP _distr6_C_ArcsinePdf(SEXP xSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type min(minSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max(maxSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ArcsinePdf(x, min, max, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_ArcsineCdf
NumericMatrix C_ArcsineCdf(NumericVector x, NumericVector min, NumericVector max, bool lower, bool logp);
RcppExport SEXP _distr6_C_ArcsineCdf(SEXP xSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type min(minSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max(maxSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ArcsineCdf(x, min, max, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_ArcsineQuantile
NumericMatrix C_ArcsineQuantile(NumericVector x, NumericVector min, NumericVector max, bool lower, bool logp);
RcppExport SEXP _distr6_C_ArcsineQuantile(SEXP xSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type min(minSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max(maxSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ArcsineQuantile(x, min, max, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_DegeneratePdf
NumericMatrix C_DegeneratePdf(NumericVector x, NumericVector mean, bool logp);
RcppExport SEXP _distr6_C_DegeneratePdf(SEXP xSEXP, SEXP meanSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_DegeneratePdf(x, mean, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_DegenerateCdf
NumericMatrix C_DegenerateCdf(NumericVector x, NumericVector mean, bool lower, bool logp);
RcppExport SEXP _distr6_C_DegenerateCdf(SEXP xSEXP, SEXP meanSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_DegenerateCdf(x, mean, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_DegenerateQuantile
NumericMatrix C_DegenerateQuantile(NumericVector x, NumericVector mean, bool lower, bool logp);
RcppExport SEXP _distr6_C_DegenerateQuantile(SEXP xSEXP, SEXP meanSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_DegenerateQuantile(x, mean, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_NegativeBinomialPdf
NumericMatrix C_NegativeBinomialPdf(NumericVector x, NumericVector size, NumericVector prob, StringVector form);
RcppExport SEXP _distr6_C_NegativeBinomialPdf(SEXP xSEXP, SEXP sizeSEXP, SEXP probSEXP, SEXP formSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< StringVector >::type form(formSEXP);
    rcpp_result_gen = Rcpp::wrap(C_NegativeBinomialPdf(x, size, prob, form));
    return rcpp_result_gen;
END_RCPP
}
// C_ShiftedLoglogisticPdf
NumericMatrix C_ShiftedLoglogisticPdf(NumericVector x, NumericVector location, NumericVector shape, NumericVector scale, bool logp);
RcppExport SEXP _distr6_C_ShiftedLoglogisticPdf(SEXP xSEXP, SEXP locationSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type location(locationSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ShiftedLoglogisticPdf(x, location, shape, scale, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_ShiftedLoglogisticCdf
NumericMatrix C_ShiftedLoglogisticCdf(NumericVector x, NumericVector location, NumericVector shape, NumericVector scale, bool lower, bool logp);
RcppExport SEXP _distr6_C_ShiftedLoglogisticCdf(SEXP xSEXP, SEXP locationSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type location(locationSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ShiftedLoglogisticCdf(x, location, shape, scale, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_ShiftedLoglogisticQuantile
NumericMatrix C_ShiftedLoglogisticQuantile(NumericVector x, NumericVector location, NumericVector shape, NumericVector scale, bool lower, bool logp);
RcppExport SEXP _distr6_C_ShiftedLoglogisticQuantile(SEXP xSEXP, SEXP locationSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type location(locationSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ShiftedLoglogisticQuantile(x, location, shape, scale, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_WeightedDiscretePdf
NumericVector C_WeightedDiscretePdf(NumericVector x, NumericVector data, NumericVector pdf, bool logp);
RcppExport SEXP _distr6_C_WeightedDiscretePdf(SEXP xSEXP, SEXP dataSEXP, SEXP pdfSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pdf(pdfSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_WeightedDiscretePdf(x, data, pdf, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_Vec_WeightedDiscretePdf
NumericMatrix C_Vec_WeightedDiscretePdf(NumericVector x, NumericMatrix data, NumericMatrix pdf, bool logp);
RcppExport SEXP _distr6_C_Vec_WeightedDiscretePdf(SEXP xSEXP, SEXP dataSEXP, SEXP pdfSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pdf(pdfSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_Vec_WeightedDiscretePdf(x, data, pdf, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_WeightedDiscreteCdf
NumericVector C_WeightedDiscreteCdf(NumericVector x, NumericVector data, NumericVector cdf, bool lower, bool logp);
RcppExport SEXP _distr6_C_WeightedDiscreteCdf(SEXP xSEXP, SEXP dataSEXP, SEXP cdfSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cdf(cdfSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_WeightedDiscreteCdf(x, data, cdf, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_Vec_WeightedDiscreteCdf
NumericMatrix C_Vec_WeightedDiscreteCdf(NumericVector x, NumericMatrix data, NumericMatrix cdf, bool lower, bool logp);
RcppExport SEXP _distr6_C_Vec_WeightedDiscreteCdf(SEXP xSEXP, SEXP dataSEXP, SEXP cdfSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cdf(cdfSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_Vec_WeightedDiscreteCdf(x, data, cdf, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_WeightedDiscreteQuantile
NumericVector C_WeightedDiscreteQuantile(NumericVector x, NumericVector data, NumericVector cdf, bool lower, bool logp);
RcppExport SEXP _distr6_C_WeightedDiscreteQuantile(SEXP xSEXP, SEXP dataSEXP, SEXP cdfSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cdf(cdfSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_WeightedDiscreteQuantile(x, data, cdf, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_Vec_WeightedDiscreteQuantile
NumericMatrix C_Vec_WeightedDiscreteQuantile(NumericVector x, NumericMatrix data, NumericMatrix cdf, bool lower, bool logp);
RcppExport SEXP _distr6_C_Vec_WeightedDiscreteQuantile(SEXP xSEXP, SEXP dataSEXP, SEXP cdfSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cdf(cdfSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(C_Vec_WeightedDiscreteQuantile(x, data, cdf, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// NumericCdf_Discrete
NumericVector NumericCdf_Discrete(NumericVector q, NumericVector x, NumericVector pdf, bool lower, bool logp);
RcppExport SEXP _distr6_NumericCdf_Discrete(SEXP qSEXP, SEXP xSEXP, SEXP pdfSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pdf(pdfSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(NumericCdf_Discrete(q, x, pdf, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// NumericCdf_Continuous
NumericVector NumericCdf_Continuous(NumericVector q, NumericVector x, NumericVector pdf, bool lower, bool logp);
RcppExport SEXP _distr6_NumericCdf_Continuous(SEXP qSEXP, SEXP xSEXP, SEXP pdfSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pdf(pdfSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(NumericCdf_Continuous(q, x, pdf, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// NumericQuantile
NumericVector NumericQuantile(NumericVector p, NumericVector x, NumericVector cdf, bool lower, bool logp);
RcppExport SEXP _distr6_NumericQuantile(SEXP pSEXP, SEXP xSEXP, SEXP cdfSEXP, SEXP lowerSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cdf(cdfSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(NumericQuantile(p, x, cdf, lower, logp));
    return rcpp_result_gen;
END_RCPP
}
// C_dpq
NumericMatrix C_dpq(std::string fun, NumericVector x, std::list<NumericVector> args, int lower, int log);
RcppExport SEXP _distr6_C_dpq(SEXP funSEXP, SEXP xSEXP, SEXP argsSEXP, SEXP lowerSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::list<NumericVector> >::type args(argsSEXP);
    Rcpp::traits::input_parameter< int >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< int >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(C_dpq(fun, x, args, lower, log));
    return rcpp_result_gen;
END_RCPP
}
// C_r
NumericMatrix C_r(std::string fun, int x, std::list<NumericVector> args);
RcppExport SEXP _distr6_C_r(SEXP funSEXP, SEXP xSEXP, SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::list<NumericVector> >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(C_r(fun, x, args));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_distr6_C_Choose", (DL_FUNC) &_distr6_C_Choose, 2},
    {"_distr6_C_ArcsinePdf", (DL_FUNC) &_distr6_C_ArcsinePdf, 4},
    {"_distr6_C_ArcsineCdf", (DL_FUNC) &_distr6_C_ArcsineCdf, 5},
    {"_distr6_C_ArcsineQuantile", (DL_FUNC) &_distr6_C_ArcsineQuantile, 5},
    {"_distr6_C_DegeneratePdf", (DL_FUNC) &_distr6_C_DegeneratePdf, 3},
    {"_distr6_C_DegenerateCdf", (DL_FUNC) &_distr6_C_DegenerateCdf, 4},
    {"_distr6_C_DegenerateQuantile", (DL_FUNC) &_distr6_C_DegenerateQuantile, 4},
    {"_distr6_C_NegativeBinomialPdf", (DL_FUNC) &_distr6_C_NegativeBinomialPdf, 4},
    {"_distr6_C_ShiftedLoglogisticPdf", (DL_FUNC) &_distr6_C_ShiftedLoglogisticPdf, 5},
    {"_distr6_C_ShiftedLoglogisticCdf", (DL_FUNC) &_distr6_C_ShiftedLoglogisticCdf, 6},
    {"_distr6_C_ShiftedLoglogisticQuantile", (DL_FUNC) &_distr6_C_ShiftedLoglogisticQuantile, 6},
    {"_distr6_C_WeightedDiscretePdf", (DL_FUNC) &_distr6_C_WeightedDiscretePdf, 4},
    {"_distr6_C_Vec_WeightedDiscretePdf", (DL_FUNC) &_distr6_C_Vec_WeightedDiscretePdf, 4},
    {"_distr6_C_WeightedDiscreteCdf", (DL_FUNC) &_distr6_C_WeightedDiscreteCdf, 5},
    {"_distr6_C_Vec_WeightedDiscreteCdf", (DL_FUNC) &_distr6_C_Vec_WeightedDiscreteCdf, 5},
    {"_distr6_C_WeightedDiscreteQuantile", (DL_FUNC) &_distr6_C_WeightedDiscreteQuantile, 5},
    {"_distr6_C_Vec_WeightedDiscreteQuantile", (DL_FUNC) &_distr6_C_Vec_WeightedDiscreteQuantile, 5},
    {"_distr6_NumericCdf_Discrete", (DL_FUNC) &_distr6_NumericCdf_Discrete, 5},
    {"_distr6_NumericCdf_Continuous", (DL_FUNC) &_distr6_NumericCdf_Continuous, 5},
    {"_distr6_NumericQuantile", (DL_FUNC) &_distr6_NumericQuantile, 5},
    {"_distr6_C_dpq", (DL_FUNC) &_distr6_C_dpq, 5},
    {"_distr6_C_r", (DL_FUNC) &_distr6_C_r, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_distr6(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
